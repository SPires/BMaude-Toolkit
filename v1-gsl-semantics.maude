(fmod GSL-VARIABLE is
	sort Variable PlaceHolder .
endfm)

(fmod GNAT is 
	sort GNat .
	op 0 : -> GNat .
	op s : GNat -> GNat .
	op _+_ : GNat GNat -> GNat [assoc comm] .
	vars G G1 G2 : GNat .
	eq 0 + G = G .
	eq G1 + s(G2) = s(G1 + G2) .
endfm)

(fmod GSL-EXPRESSION is
	inc GNAT .
	inc GSL-VARIABLE .
	sort Expression .
	subsort GNat PlaceHolder Variable < Expression .
	subsort PlaceHolder < Expression .
	op _+_ : Expression Expression -> Expression [assoc comm] .	
endfm)

(fmod GBOOL is
	sort GBool .
	ops true false : -> GBool .
	op neg : GBool -> GBool .
	op _and_ : GBool GBool -> GBool [assoc comm] .
	vars G G1 G2 : GBool .
	eq neg(true) = false .
	eq neg(false) = true .
	eq true and G = G .
	eq false and G = false .
endfm)

(fmod GSL-PREDICATE is 
	inc GBOOL . inc GSL-EXPRESSION .
	inc GSL-VARIABLE .	
	sort Predicate .
	subsort GBool PlaceHolder < Predicate < Expression .
	op neg : Predicate -> Predicate .
	op _and_ : Predicate Predicate -> Predicate [assoc comm] .		
	op _eq_ : Expression Expression -> Predicate [assoc comm] .
	vars G1 G2 : GNat .
	eq G1 eq G2 = if (G1 == G2) then true else false fi .
endfm)

(fmod GSL-SYNTAX is
	inc GSL-EXPRESSION . 
	inc GSL-PREDICATE .
	
	sort Substitution UChoice PlaceHolder .
	subsort Variable < Expression Predicate .
	subsort UChoice < Substitution .
	
	--- Simple substitution
	op _:=_ : Variable Expression -> Substitution [ctor] .

	--- "Does nothing" substitution
	op skip : -> Substitution [ctor] .

	--- Pre-condition substitution
	op _|_ : Predicate Substitution -> Substitution [ctor] .

	--- Bounded choice substitution
	op _`[`]_ : Substitution Substitution -> Substitution [assoc comm ctor] .

	--- Guarded substitution
	op _==>_ : Predicate Substitution -> Substitution [ctor] .

	--- Unbounded choice substitution
	op @_._ : PlaceHolder Substitution -> UChoice [ctor] .
endfm)

(fmod GSL-STORE is 
	inc GSL-VARIABLE .
	inc GNAT .
	
	sorts Cell Store .
	subsort Cell < Store .
	
	op _|->_ : Variable GNat -> Cell .

	op empty : -> Store .
	op __ : Store Store -> Store [assoc comm id: empty] .

	var V : Variable . var G : GNat . var S : Store .

	eq (V |-> G)  (V |-> G)  S = (V |-> G)  S .
endfm)

(mod GSL-SEMANTICS is
	inc GSL-SYNTAX .
	inc GSL-STORE .
	
	sort Conf .

	op abort : -> Conf .
	
	op _`,_ : Substitution Store ~> Conf .
	op _`,_`,_ : Predicate Substitution Store ~> Conf [frozen] .
	op _`,_`,_ : Expression Substitution Store ~> Conf [frozen] .
	op _`[_/_`] : Expression GNat PlaceHolder -> Expression .
	op _`[_/_`] : Expression GBool PlaceHolder -> Expression .
	op _`[_/_`] : Predicate GNat PlaceHolder -> Predicate .
	op _`[_/_`] : Predicate GBool PlaceHolder -> Predicate .
	op _`[_/_`] : Substitution GNat PlaceHolder -> Substitution .
	op _`[_/_`] : Substitution GBool PlaceHolder -> Substitution .	

	var V V1 V2 : Variable . vars E E1 E2 : Expression . var STO STO' : Store . vars G G1 G2 : GNat .
	var P : Predicate . vars S S1 S2 : Substitution . var PH : PlaceHolder . var B B1 B2 : GBool .
	
	eq [simple1] : ((V := E) , STO) = (E, (V := E) , STO)  [variant] .
	eq [simple2] : (V1, (V2 := E) , ((V1 |-> G) STO)) = (G, (V2 := E) , ((V1 |-> G) STO)) [variant] .
	eq [simple2] : (V1 + E1, (V2 := E2) , ((V1 |-> G) STO)) = (G + E1, (V2 := E2) , ((V1 |-> G) STO)) [variant] .
	eq [simple2] : (G1, (V := E) , ((V |-> G2) STO)) = (skip , ((V |-> G1) STO)) [variant] .

	eq [pre1] : (P | S , STO) = (P , P | S , STO) [variant] .
	eq [pre2] : (V1 eq E, (P | S) , ((V1 |-> G) STO)) = (G eq E, (P | S) , ((V1 |-> G) STO)) [variant] .
	eq [pre3] : (true, P | S , STO) = (S , STO) [variant] .
	eq [pre4] : (false, P | S , STO) = abort [variant] .

	rl [bchoice] : S1 [] S2 => S1 .

	eq [guard1] : (P ==> S , STO) = (P , (P ==> S) , STO) [variant] .
	eq [guard2] : ((V1 eq E), (P ==> S) , ((V1 |-> G) STO)) = ((G eq E), (P ==> S) , ((V1 |-> G) STO)) [variant] .
	eq [guard3] : (true, (P ==> S) , STO) = (S , STO) [variant] .
	eq [guard4] : (false, (P ==> S) , STO) = (skip, STO) [variant] .

	rl [uchoice] : (@ PH . S), STO => (S [ G / PH ]), STO [nonexec] .
	rl [uchoice] : (@ PH . S), STO => (S [ B / PH ]), STO [nonexec] .  	
	
	--- Equations for _[_/_]
	--- We assume that alpha-renaming has been performed.
	eq [repl-gnat] : G1 [ G2 / PH ] = G1 .
	eq [repl-gnat] : G [ B / PH ] = B .
	eq [repl-gbool1] : B1 [ B2 / PH ] = B1 .
	eq [repl-gbool2] : B [ G / PH ] = B .	
	eq [repl-simple] : (V := E) [ G / PH ] = V := ( E [ G / PH ] ) .
	eq [repl-simple] : (V := E) [ B / PH ] = V := ( E [ B / PH ] ) .	
	eq [repl-guarded-subst] : (P ==> S) [ G / PH ] = ((P [ G / PH ]) ==> (S [ G / PH])) .
	eq [repl-guarded-subst] : (P ==> S) [ B / PH ] = ((P [ B / PH ]) ==> (S [ B / PH])) .	
	eq [repl-guarded-subst] : (P | S) [ G / PH ] = ((P [ G / PH ]) | (S [ G / PH])) .
	eq [repl-guarded-subst] : (P | S) [ B / PH ] = ((P [ B / PH ]) | (S [ B / PH])) .	
	eq [repl-ph-gnat] : PH [ G / PH ] = G .
	eq [repl-ph-gbool] : PH [ B / PH ] = B .
	eq [repl-and] : (PH and P) [ B / PH ] = B and (P [ B / PH]) .
	eq [repl-ph-sum] : (PH + E) [ G / PH ] = G + (E [ G / PH ]) .
endm)

(mod SIMPLIFIED-ABSTRACT-MACHINE-NOTATION is
        inc GSL-SEMANTICS .
	sort NeSubstitutionSet .
	subsort Substitution < NeSubstitutionSet .

	op BEGIN_END : Substitution -> Substitution .
	op PRE_THEN_END : Predicate Substitution -> Substitution .
	op IF_THEN_ELSE_END : Predicate Substitution Substitution -> Substitution .
	op IF_THEN_END : Predicate Substitution -> Substitution .
	op _:=`bool`(_`) : Variable Predicate -> Substitution .
	op _OR_ : NeSubstitutionSet NeSubstitutionSet -> NeSubstitutionSet [assoc comm] .
	op CHOICE_END : NeSubstitutionSet -> Substitution .
	op ANY_WHERE_THEN_END : PlaceHolder Predicate Substitution -> Substitution .

	vars S T : Substitution . var SS : NeSubstitutionSet . var P : Predicate . var X : PlaceHolder .

	eq BEGIN S END = S .
	eq PRE P THEN S END = P | S .
	eq IF P THEN S ELSE T END = (P ==> S) [] (neg(P) ==> S) .
	eq IF P THEN S END = IF P THEN S ELSE skip END .
	eq X := bool ( P ) = IF P THEN (X := true) ELSE (X := false) END .
	eq CHOICE SS END = SS .
	eq S OR T = S [] T .	
	eq S OR (T OR SS) = S [] (T OR SS) .
	eq ANY X WHERE P THEN S END = (@ X . (P ==> S)) .	
endm)

(mod SAMN-EXAMPLE is inc SIMPLIFIED-ABSTRACT-MACHINE-NOTATION .

	op y : -> Variable .
	op x : -> PlaceHolder .
endm)

(search [,2] in SAMN-EXAMPLE :
	CHOICE
		ANY x WHERE true THEN y :=  x + s(0) END
	OR
		ANY x WHERE true THEN y :=  x END
	END, STO:Store ~>* skip, STO':Store  .)

eof

search [,2] in SAMN-EXAMPLE : CHOICE ANY x WHERE true THEN y := x + s(0)END OR ANY x WHERE true THEN y := x END END,STO:Store ~>* skip,
    STO':Store .

Solution 1
STO':Store --> #13:Store y |-> #7:GNat ;
STO:Store --> #13:Store y |-> #12:GNat

Solution 2
STO':Store --> #13:Store y |-> s(#7:GNat);
STO:Store --> #13:Store y |-> #12:GNat

No more solutions.